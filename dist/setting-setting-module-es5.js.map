{"version":3,"sources":["webpack:///src/app/pages/setting/backend/common/api/users-password.api.ts","webpack:///src/app/pages/setting/backend/common/services/company.service.ts","webpack:///src/app/pages/setting/models/companyDTO.ts","webpack:///src/app/pages/setting/setting.component.ts","webpack:///src/app/pages/setting/setting.component.html","webpack:///src/app/pages/setting/backend/common/services/users-password.service.ts","webpack:///src/app/pages/setting/components/companylogo/companylogo.component.ts","webpack:///src/app/pages/setting/components/companylogo/companylogo.component.html","webpack:///src/app/pages/setting/setting.module.ts","webpack:///src/app/pages/setting/components/password-change/password-change.component.ts","webpack:///src/app/pages/setting/components/password-change/password-change.component.html","webpack:///src/app/pages/setting/setting-routing.module.ts"],"names":["UsersPasswordApi","api","apiController","data","put","CompanyService","_httpClient","get","apiUrl","companyDTO","post","CompanyDTO","id","name","identification","status","autoRenewal","image","contractDate","SettingComponent","UsersPasswordService","update","CompanylogoComponent","_companyService","toastrService","isvisible","files","idempresa","index","destroyByClick","duration","hasIcon","position","TOP_RIGHT","preventDuplicates","title","content","types","positions","TOP_LEFT","BOTTOM_LEFT","BOTTOM_RIGHT","TOP_END","TOP_START","BOTTOM_END","BOTTOM_START","quotes","body","initialize","getCompanyLogo","type","icon","config","titleContent","show","updateCompany","ngOnInit","imageSrc","droppedFile","fileEntry","isFile","reader","FileReader","file","console","log","relativePath","readAsDataURL","onload","result","event","subscribe","response","res","showToast","dropped","fileOver","fileLeave","components","SettingModule","PasswordChangeComponent","options","fb","usersPasswordService","userData","location","unsubscribe$","minLength","getConfigValue","maxLength","submitted","hasPasswordError","hasPasswordReset","passwordForm","initPasswordForm","getCurrentUser","refreshInfoCurrentUser","pipe","user","hasResetPassword","passwordValidators","required","group","currentPassword","control","newPassword","confirmPassword","password","value","reset","success","key","$event","preventDefault","back","updatePassword","routes","path","component","children","SettingRoutingModule","forChild","routedComponents"],"mappings":"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","file":"setting-setting-module-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\nimport {HttpService} from '../../../../../@core/backend/common/api/http.service';\r\nimport {Password} from '../../../models/password';\r\n\r\n@Injectable()\r\nexport class UsersPasswordApi {\r\n  private readonly apiController: string = 'password/update';\r\n\r\n  constructor(private api: HttpService) { }\r\n\r\n  update(data: Password): Observable<boolean> {\r\n    return this.api.put(`${this.apiController}`, data);\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../../../../../environments/environment';\r\nimport { CompanyDTO } from '../../../models/companyDTO';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CompanyService {\r\n\r\nconstructor(private _httpClient:HttpClient) \r\n\r\n  { }\r\n\r\n  public getCompanyLogo(): Observable<CompanyDTO> {\r\n    return this._httpClient.get<CompanyDTO>(`${environment.apiUrl}/Company/GetCompany`)\r\n  }\r\n  \r\n  public updateCompany(companyDTO:CompanyDTO){\r\n    return this._httpClient.post<CompanyDTO>(`${environment.apiUrl}/Company/UpdateCompany`,companyDTO)\r\n  }\r\n}\r\n","\r\nexport class CompanyDTO {\r\n    id: number;\r\n    name: string;\r\n    identification: string;\r\n    status: boolean;\r\n    autoRenewal: boolean;\r\n    image: string;\r\n    contractDate: string;\r\n    constructor(){\r\n        this.id= 0;\r\n        this.name= ' ';\r\n        this.identification= ' ';\r\n        this.status= false;\r\n        this.autoRenewal= false;\r\n        this.image= ' ';\r\n        this.contractDate= ' ';\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ngx-Setting',\r\n  templateUrl: './setting.component.html',\r\n  styleUrls: ['./setting.component.scss']\r\n})\r\nexport class SettingComponent implements OnInit {\r\n\r\n\r\n\r\n  constructor() { \r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","<router-outlet ></router-outlet>","import {Injectable} from '@angular/core';\r\nimport {UsersPasswordApi} from '../api/users-password.api';\r\nimport {Password} from '../../../models/password';\r\nimport {Observable} from 'rxjs';\r\n\r\n@Injectable()\r\nexport class UsersPasswordService {\r\n\r\n    constructor(private api: UsersPasswordApi) {\r\n\r\n    }\r\n\r\n    update(data: Password): Observable<boolean> {\r\n        return this.api.update(data);\r\n    }\r\n}\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {\r\n    NbComponentStatus,\r\n    NbGlobalLogicalPosition,\r\n    NbGlobalPhysicalPosition,\r\n    NbGlobalPosition,\r\n    NbToastrService\r\n} from '@nebular/theme';\r\nimport {ToasterConfig} from 'angular2-toaster';\r\nimport {NgxFileDropEntry, FileSystemFileEntry, FileSystemDirectoryEntry} from 'ngx-file-drop';\r\nimport {CompanyService} from '../../backend/common/services/company.service';\r\nimport {CompanyDTO} from '../../models/companyDTO';\r\n\r\n@Component({\r\n    selector: 'ngx-companylogo',\r\n    templateUrl: './companylogo.component.html',\r\n    styleUrls: ['./companylogo.component.scss']\r\n})\r\nexport class CompanylogoComponent implements OnInit {\r\n    public isvisible: boolean = true;\r\n    public files: NgxFileDropEntry[] = [];\r\n    public imageSrc: any;\r\n    public idempresa: string = \"\";\r\n    public companyDTO: CompanyDTO = new CompanyDTO();\r\n    //#region Variables Toast\r\n    config: ToasterConfig;\r\n\r\n    index = 1;\r\n    destroyByClick = true;\r\n    duration = 2000;\r\n    hasIcon = true;\r\n    position: NbGlobalPosition = NbGlobalPhysicalPosition.TOP_RIGHT;\r\n    preventDuplicates = false;\r\n    status: NbComponentStatus = 'primary';\r\n\r\n    title = 'HI there!';\r\n    content = `I'm cool toaster!`;\r\n\r\n    types: NbComponentStatus[] = [\r\n        'primary',\r\n        'success',\r\n        'info',\r\n        'warning',\r\n        'danger',\r\n    ];\r\n    positions: string[] = [\r\n        NbGlobalPhysicalPosition.TOP_RIGHT,\r\n        NbGlobalPhysicalPosition.TOP_LEFT,\r\n        NbGlobalPhysicalPosition.BOTTOM_LEFT,\r\n        NbGlobalPhysicalPosition.BOTTOM_RIGHT,\r\n        NbGlobalLogicalPosition.TOP_END,\r\n        NbGlobalLogicalPosition.TOP_START,\r\n        NbGlobalLogicalPosition.BOTTOM_END,\r\n        NbGlobalLogicalPosition.BOTTOM_START,\r\n    ];\r\n\r\n    quotes = [\r\n        {title: null, body: 'We rock at Angular'},\r\n        {title: null, body: 'Titles are not always needed'},\r\n        {title: null, body: 'Toastr rock!'},\r\n    ];\r\n\r\n    //#endregion\r\n\r\n    constructor(\r\n        private _companyService: CompanyService,\r\n        private toastrService: NbToastrService,\r\n    ) {\r\n    }\r\n\r\n\r\n    ngOnInit() {\r\n        this.initialize();\r\n    }\r\n\r\n    private initialize() {\r\n\r\n        this.getCompanyLogo();\r\n    }\r\n\r\n    //#region Metodos privados\r\n    //Todo : Muestra toast segun mensaje\r\n    private showToast(type: NbComponentStatus, title: string, body: string) {\r\n        const hasIcon = this.hasIcon ? {} : {icon: 'alert-circle-outline'};\r\n        const config = {\r\n            status: type,\r\n            destroyByClick: this.destroyByClick,\r\n            duration: this.duration,\r\n            position: this.position,\r\n            preventDuplicates: this.preventDuplicates,\r\n            ...hasIcon,\r\n        };\r\n        const titleContent = title ? `. ${title}` : '';\r\n\r\n        this.index += 1;\r\n        this.toastrService.show(\r\n            body,\r\n            ``,\r\n            config);\r\n    }\r\n\r\n    public DeleteFile() {\r\n        this.companyDTO.image = null;\r\n        this.updateCompany(this.companyDTO);\r\n        this.ngOnInit();\r\n    }\r\n\r\n    public UploadFile() {\r\n        if (this.imageSrc === \"https://icon-library.com/images/not-found-icon/not-found-icon-6.jpg\") {\r\n            this.companyDTO.image = null;\r\n            this.updateCompany(this.companyDTO);\r\n        } else {\r\n            this.companyDTO.image = this.imageSrc;\r\n            this.updateCompany(this.companyDTO);\r\n        }\r\n\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region  Metodo Firedrop\r\n    public dropped(files: NgxFileDropEntry[]) {\r\n        for (const droppedFile of files) {\r\n\r\n            // Is it a file?\r\n            if (droppedFile.fileEntry.isFile) {\r\n                const fileEntry = droppedFile.fileEntry as FileSystemFileEntry;\r\n                const reader = new FileReader();\r\n                fileEntry.file((file: File) => {\r\n\r\n                    // Here you can access the real file\r\n                    console.log(droppedFile.relativePath, file);\r\n                    reader.readAsDataURL(file);\r\n                    reader.onload = () => {\r\n                        this.imageSrc = reader.result;\r\n                        this.companyDTO.image = this.imageSrc;\r\n                    };\r\n\r\n\r\n                });\r\n            } else {\r\n                // It was a directory (empty directories are added, otherwise only files)\r\n                const fileEntry = droppedFile.fileEntry as FileSystemDirectoryEntry;\r\n                console.log(droppedFile.relativePath, fileEntry);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public fileOver(event) {\r\n        console.log(event);\r\n    }\r\n\r\n    public fileLeave(event) {\r\n        console.log(event);\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Servicios\r\n    //#region Get\r\n    public getCompanyLogo() {\r\n        this._companyService.getCompanyLogo().subscribe((response: CompanyDTO) => {\r\n            response.image || response.image != null ? this.imageSrc = response.image : this.imageSrc = \"https://icon-library.com/images/not-found-icon/not-found-icon-6.jpg\"\r\n            this.companyDTO = response\r\n        })\r\n    }\r\n\r\n    //endregion\r\n    //#region Post\r\n    public updateCompany(companyDTO: CompanyDTO) {\r\n        this._companyService.updateCompany(companyDTO).subscribe(res => {\r\n            this.getCompanyLogo();\r\n            if (companyDTO.image != null) {\r\n                this.showToast(\"success\", null, \"Logo guardado con exito\")\r\n            } else {\r\n                this.showToast(\"success\", null, \"El logo se ha eliminado\")\r\n            }\r\n        });\r\n    }\r\n\r\n    //#endregion\r\n\r\n\r\n}\r\n","<nb-card accent=\"info\">\r\n    <nb-card-header> {{\"SettingModule.logo\"| translate }}</nb-card-header>\r\n    <nb-card-body>\r\n        <div class=\"center\">\r\n            <ngx-file-drop dropZoneLabel=\"Drop files here\" (onFileDrop)=\"dropped($event)\"\r\n                           (onFileOver)=\"fileOver($event)\" (onFileLeave)=\"fileLeave($event)\">\r\n                <ng-template ngx-file-drop-content-tmp let-openFileSelector=\"openFileSelector\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col\">Deslice la imagen a subir ...</div>\r\n                        <div class=\"col pt-2 align-self-center\">\r\n                            <button nbButton outline status=\"primary\" (click)=\"openFileSelector()\" outline>\r\n                                Cargar Imagen\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                </ng-template>\r\n            </ngx-file-drop>\r\n            <section>\r\n                <div class=\"d-flex justify-content-center p-3\" *ngIf=\"imageSrc\">\r\n                    <img [(src)]=\"imageSrc\" *ngIf=\"imageSrc\" style=\"height: 300px; width:500px\" class=\"pb-2\">\r\n                    <br>\r\n                </div>\r\n                <div class=\"d-flex justify-content-center\" *ngIf=\"imageSrc\">\r\n                    <button nbButton [status]=\"success\" class=\"status-success align-self-center\" (click)=\"UploadFile()\"\r\n                            outline>\r\n                        Guardar\r\n                    </button>\r\n                    <button nbButton outline status=\"danger\" class=\"m-2\" (click)=\"DeleteFile()\">Eliminar</button>\r\n                </div>\r\n            </section>\r\n\r\n        </div>\r\n    </nb-card-body>\r\n</nb-card>\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {SettingComponent} from './setting.component';\r\nimport {routedComponents, SettingRoutingModule} from './setting-routing.module';\r\n// import { AdduserComponent } from './components/adduser/adduser.component';\r\n// import { GetuserComponent } from './components/getuser/getuser.component';\r\n// import { ThirdpartymanageComponent } from './components/thirdpartymanage/thirdpartymanage.component';\r\n// import { CompanytypelistComponent } from './components/companytypelist/companytypelist.component';\r\n// import { ManageprocuracyComponent } from './components/manageprocuracy/manageprocuracy.component';\r\nimport {CompanylogoComponent} from './components/companylogo/companylogo.component';\r\nimport {PasswordChangeComponent} from './components/password-change/password-change.component';\r\nimport {\r\n    NbAccordionModule,\r\n    NbButtonModule,\r\n    NbCardModule,\r\n    NbFormFieldModule,\r\n    NbIconModule,\r\n    NbInputModule,\r\n    NbSelectModule,\r\n    NbDatepickerModule,\r\n    NbUserModule,\r\n\r\n    NbTreeGridModule, NbAlertModule\r\n} from '@nebular/theme';\r\nimport {ThemeModule} from '../../@theme/theme.module';\r\nimport {TablesRoutingModule} from '../tables/tables-routing.module';\r\nimport {Ng2SmartTableModule} from 'ng2-smart-table';\r\nimport {ComponentsModule} from '../../@components/components.module';\r\nimport {UsersPasswordService} from './backend/common/services/users-password.service';\r\nimport {UsersPasswordApi} from './backend/common/api/users-password.api';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport {NbFileUploaderModule} from \"../../@components/editors/file-uploader/file-uploader.module\";\r\nimport {ManageprocuracyComponent} from \"../management/components/manageprocuracy/manageprocuracy.component\";\r\nimport { NgxFileDropModule } from 'ngx-file-drop';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\nconst components = [\r\n    SettingComponent,\r\n    // AdduserComponent,\r\n    // GetuserComponent,   \r\n    ManageprocuracyComponent,    \r\n    CompanylogoComponent,\r\n    PasswordChangeComponent,\r\n    // ManageUserComponent,\r\n    //   UserFormComponent,\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        SettingRoutingModule,\r\n        CommonModule,\r\n        NbCardModule,\r\n        NbInputModule,\r\n        NbButtonModule,\r\n        NbAccordionModule,\r\n        FormsModule,\r\n        Ng2SmartTableModule,\r\n        NbTreeGridModule,\r\n        NbFormFieldModule,\r\n        NbIconModule,\r\n        NbDatepickerModule,\r\n        ReactiveFormsModule,\r\n        NbIconModule,\r\n        ThemeModule,\r\n        TablesRoutingModule,\r\n        Ng2SmartTableModule,\r\n        ComponentsModule,\r\n        NbSelectModule,\r\n        NbButtonModule,\r\n        NbAccordionModule,\r\n        NbFileUploaderModule,\r\n        NbUserModule,\r\n        NbUserModule,\r\n        NgxFileDropModule,\r\n        TranslateModule,\r\n        NbAlertModule\r\n    ],\r\n    declarations: [...routedComponents,components],\r\n    providers: [\r\n        UsersPasswordApi,\r\n        UsersPasswordService,\r\n    ],\r\n})\r\nexport class SettingModule {\r\n}\r\n","import {Component, Inject, OnInit} from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {Location} from '@angular/common';\r\nimport {UsersPasswordService} from '../../backend/common/services/users-password.service';\r\nimport {Password} from '../../models/password';\r\nimport {NbToastrService} from '@nebular/theme';\r\nimport {getDeepFromObject} from '../../../../@auth/helpers';\r\nimport {NB_AUTH_OPTIONS} from '@nebular/auth';\r\nimport {UserData} from \"../../../../@core/interfaces/common/users\";\r\nimport {takeUntil} from \"rxjs/operators\";\r\nimport {Subject} from \"rxjs/Subject\";\r\n\r\n@Component({\r\n    // eslint-disable-next-line @angular-eslint/component-selector\r\n    selector: 'ngx-password-change',\r\n    templateUrl: './password-change.component.html',\r\n    styleUrls: ['./password-change.component.scss'],\r\n})\r\nexport class PasswordChangeComponent implements OnInit {\r\n    protected readonly unsubscribe$ = new Subject<void>();\r\n    minLength: number = this.getConfigValue('forms.validation.password.minLength');\r\n    maxLength: number = this.getConfigValue('forms.validation.password.maxLength');\r\n    passwordForm: FormGroup;\r\n    submitted = false;\r\n    hasPasswordError = false;\r\n    hasPasswordReset = false;\r\n\r\n    get currentPassword() {\r\n        return this.passwordForm.get('currentPassword');\r\n    }\r\n\r\n    get newPassword() {\r\n        return this.passwordForm.get('newPassword');\r\n    }\r\n\r\n    get confirmPassword() {\r\n        return this.passwordForm.get('confirmPassword');\r\n    }\r\n\r\n    constructor(\r\n        @Inject(NB_AUTH_OPTIONS) protected options = {},\r\n        protected fb: FormBuilder,\r\n        protected usersPasswordService: UsersPasswordService,\r\n        protected toastrService: NbToastrService,\r\n        private userData: UserData,\r\n        protected location: Location) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.initPasswordForm();\r\n        this.getCurrentUser();\r\n\r\n    }\r\n\r\n    getCurrentUser(): void {\r\n        this.userData.refreshInfoCurrentUser().pipe(takeUntil(this.unsubscribe$)).subscribe(user => {\r\n            console.log()\r\n            this.hasPasswordReset = user.hasResetPassword\r\n            console.log(\"hasPasswordReset\", this.hasPasswordReset)\r\n        })\r\n    }\r\n\r\n    initPasswordForm() {\r\n        const passwordValidators = [\r\n            Validators.required,\r\n            Validators.minLength(this.minLength),\r\n            Validators.maxLength(this.maxLength),\r\n        ];\r\n\r\n        this.passwordForm = this.fb.group({\r\n            currentPassword: this.fb.control('', [...passwordValidators]),\r\n            newPassword: this.fb.control('', [...passwordValidators]),\r\n            confirmPassword: this.fb.control('', [...passwordValidators]),\r\n        });\r\n    }\r\n\r\n    updatePassword() {\r\n        this.submitted = true;\r\n        this.hasPasswordError = false;\r\n        const password: Password = this.passwordForm.value;\r\n        this.usersPasswordService.update(password).subscribe(() => {\r\n            this.getCurrentUser();\r\n            this.submitted = false;\r\n            this.passwordForm.reset();\r\n            this.toastrService.success('', '¡Registro exitoso!', {\r\n                icon: '',\r\n            });\r\n        }, () => {\r\n            this.submitted = false;\r\n            this.hasPasswordError = true;\r\n        });\r\n    }\r\n\r\n    getConfigValue(key: string): any {\r\n        return getDeepFromObject(this.options, key, null);\r\n    }\r\n\r\n    back($event: MouseEvent) {\r\n        $event.preventDefault();\r\n        this.location.back();\r\n    }\r\n}\r\n","<div class=\"col-lg-12\">\r\n    <nb-card *ngIf=\"hasPasswordReset\">\r\n        <nb-card-body class=\"example-last-child-no-b-margin\">\r\n            <nb-alert status=\"warning\">¡Advertencia! Para continuar debe actualizar su contraseña.</nb-alert>\r\n        </nb-card-body>\r\n    </nb-card>\r\n    <nb-card>\r\n        <!--<nb-card-header>Cambiar contraseña</nb-card-header>-->\r\n        <nb-card-header>\r\n            <nav class=\"navigation\">\r\n                <a href=\"#\" (click)=\"back($event)\" class=\"link back-link\" aria-label=\"Back\">\r\n                    <nb-icon icon=\"arrow-back\"></nb-icon>\r\n                </a>\r\n                {{\"SettingModule.Cambiar_Contrasena\"| translate }}\r\n            </nav>\r\n        </nb-card-header>\r\n        <nb-card-body>\r\n            <form [formGroup]=\"passwordForm\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"currentPassword\" class=\"label\">Contraseña actual</label>\r\n\r\n                    <input fullWidth\r\n                           nbInput\r\n                           autofocus\r\n                           id=\"currentPassword\"\r\n                           formControlName=\"currentPassword\"\r\n                           type=\"password\"\r\n                           class=\"first\"\r\n                           placeholder=\"Contraseña actual\">\r\n\r\n                    <ngx-validation-message label=\"Password\"\r\n                                            [showMinLength]=\"currentPassword?.hasError('minlength') && currentPassword.touched\"\r\n                                            [showMaxLength]=\"currentPassword?.hasError('maxlength') && currentPassword.touched\"\r\n                                            [showRequired]=\"currentPassword?.errors?.required && currentPassword.touched\"\r\n                                            [minLength]=\"minLength\"\r\n                                            [maxLength]=\"maxLength\"></ngx-validation-message>\r\n                    <p class=\"error-message caption status-danger\"\r\n                       *ngIf=\"hasPasswordError\">\r\n                        Contraseña incorrecta.\r\n                    </p>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"newPassword\" class=\"label\">Contraseña nueva</label>\r\n\r\n                    <input fullWidth nbInput id=\"newPassword\"\r\n                           formControlName=\"newPassword\"\r\n                           type=\"password\"\r\n                           placeholder=\"Nueva contraseña\">\r\n\r\n                    <ngx-validation-message label=\"Password\"\r\n                                            [showMinLength]=\"newPassword?.hasError('minlength') && newPassword.touched\"\r\n                                            [showMaxLength]=\"newPassword?.hasError('maxlength') && newPassword.touched\"\r\n                                            [showRequired]=\"newPassword?.errors?.required && newPassword.touched\"\r\n                                            [minLength]=\"minLength\"\r\n                                            [maxLength]=\"maxLength\"></ngx-validation-message>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"confirmPassword\" class=\"label\">Confirmar contraseña</label>\r\n\r\n                    <input fullWidth\r\n                           nbInput\r\n                           id=\"confirmPassword\"\r\n                           formControlName=\"confirmPassword\"\r\n                           type=\"password\"\r\n                           placeholder=\"Confirmar contraseña\">\r\n\r\n                    <ngx-validation-message label=\"Confirmar contraseña\"\r\n                                            [showMinLength]=\"confirmPassword?.hasError('minlength') && confirmPassword.touched\"\r\n                                            [showMaxLength]=\"confirmPassword?.hasError('maxlength') && confirmPassword.touched\"\r\n                                            [showRequired]=\"confirmPassword?.errors?.required && confirmPassword.touched\"\r\n                                            [minLength]=\"minLength\"\r\n                                            [maxLength]=\"maxLength\"></ngx-validation-message>\r\n                    <p class=\"error-message caption status-danger\"\r\n                       *ngIf=\"newPassword.value != confirmPassword.value && confirmPassword.touched\">\r\n                        ¡La contraseña y la contraseña de confirmación no coinciden!\r\n                    </p>\r\n                </div>\r\n            </form>\r\n        </nb-card-body>\r\n        <nb-card-footer>\r\n            <button nbButton\r\n                    status=\"primary\"\r\n                    fullWidth\r\n                    [disabled]=\"submitted || !passwordForm.valid || newPassword.value != confirmPassword.value\"\r\n                    [class.btn-pulse]=\"submitted\"\r\n                    (click)=\"updatePassword()\">\r\n                Guardar\r\n            </button>\r\n        </nb-card-footer>\r\n    </nb-card>\r\n</div>\r\n","import {NgModule} from '@angular/core';\r\nimport {RouterModule, Routes} from '@angular/router';\r\nimport {CompanytypelistComponent} from '../management/components/companytypelist/companytypelist.component';\r\nimport {ThirdpartymanageComponent} from '../management/components/thirdpartymanage/thirdpartymanage.component';\r\nimport {ManageprocuracyComponent} from '../management/components/manageprocuracy/manageprocuracy.component';\r\nimport {SettingComponent} from './setting.component';\r\nimport {CompanylogoComponent} from './components/companylogo/companylogo.component';\r\nimport {PasswordChangeComponent} from './components/password-change/password-change.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: SettingComponent,\r\n        children: [\r\n            {\r\n                path: 'companylogo',\r\n                component: CompanylogoComponent,\r\n            },\r\n            {\r\n                path: 'companylogo',\r\n                component: CompanylogoComponent,\r\n            },\r\n            {\r\n                path: 'password-change',\r\n                component: PasswordChangeComponent,\r\n            },\r\n        ],\r\n    },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class SettingRoutingModule { }\r\n\r\nexport const routedComponents = [\r\n    ManageprocuracyComponent,\r\n    CompanylogoComponent,\r\n    SettingComponent,\r\n    PasswordChangeComponent,\r\n];\r\n"]}