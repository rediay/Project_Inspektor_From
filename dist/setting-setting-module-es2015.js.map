{"version":3,"sources":["./src/app/pages/setting/backend/common/api/users-password.api.ts","./src/app/pages/setting/backend/common/services/company.service.ts","./src/app/pages/setting/models/companyDTO.ts","./src/app/pages/setting/setting.component.ts","./src/app/pages/setting/setting.component.html","./src/app/pages/setting/backend/common/services/users-password.service.ts","./src/app/pages/setting/components/companylogo/companylogo.component.ts","./src/app/pages/setting/components/companylogo/companylogo.component.html","./src/app/pages/setting/setting.module.ts","./src/app/pages/setting/components/password-change/password-change.component.ts","./src/app/pages/setting/components/password-change/password-change.component.html","./src/app/pages/setting/setting-routing.module.ts"],"names":[],"mappings":"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","file":"setting-setting-module-es2015.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\nimport {HttpService} from '../../../../../@core/backend/common/api/http.service';\r\nimport {Password} from '../../../models/password';\r\n\r\n@Injectable()\r\nexport class UsersPasswordApi {\r\n  private readonly apiController: string = 'password/update';\r\n\r\n  constructor(private api: HttpService) { }\r\n\r\n  update(data: Password): Observable<boolean> {\r\n    return this.api.put(`${this.apiController}`, data);\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../../../../../environments/environment';\r\nimport { CompanyDTO } from '../../../models/companyDTO';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CompanyService {\r\n\r\nconstructor(private _httpClient:HttpClient) \r\n\r\n  { }\r\n\r\n  public getCompanyLogo(): Observable<CompanyDTO> {\r\n    return this._httpClient.get<CompanyDTO>(`${environment.apiUrl}/Company/GetCompany`)\r\n  }\r\n  \r\n  public updateCompany(companyDTO:CompanyDTO){\r\n    return this._httpClient.post<CompanyDTO>(`${environment.apiUrl}/Company/UpdateCompany`,companyDTO)\r\n  }\r\n}\r\n","\r\nexport class CompanyDTO {\r\n    id: number;\r\n    name: string;\r\n    identification: string;\r\n    status: boolean;\r\n    autoRenewal: boolean;\r\n    image: string;\r\n    contractDate: string;\r\n    constructor(){\r\n        this.id= 0;\r\n        this.name= ' ';\r\n        this.identification= ' ';\r\n        this.status= false;\r\n        this.autoRenewal= false;\r\n        this.image= ' ';\r\n        this.contractDate= ' ';\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ngx-Setting',\r\n  templateUrl: './setting.component.html',\r\n  styleUrls: ['./setting.component.scss']\r\n})\r\nexport class SettingComponent implements OnInit {\r\n\r\n\r\n\r\n  constructor() { \r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","<router-outlet ></router-outlet>","import {Injectable} from '@angular/core';\r\nimport {UsersPasswordApi} from '../api/users-password.api';\r\nimport {Password} from '../../../models/password';\r\nimport {Observable} from 'rxjs';\r\n\r\n@Injectable()\r\nexport class UsersPasswordService {\r\n\r\n    constructor(private api: UsersPasswordApi) {\r\n\r\n    }\r\n\r\n    update(data: Password): Observable<boolean> {\r\n        return this.api.update(data);\r\n    }\r\n}\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {\r\n    NbComponentStatus,\r\n    NbGlobalLogicalPosition,\r\n    NbGlobalPhysicalPosition,\r\n    NbGlobalPosition,\r\n    NbToastrService\r\n} from '@nebular/theme';\r\nimport {ToasterConfig} from 'angular2-toaster';\r\nimport {NgxFileDropEntry, FileSystemFileEntry, FileSystemDirectoryEntry} from 'ngx-file-drop';\r\nimport {CompanyService} from '../../backend/common/services/company.service';\r\nimport {CompanyDTO} from '../../models/companyDTO';\r\n\r\n@Component({\r\n    selector: 'ngx-companylogo',\r\n    templateUrl: './companylogo.component.html',\r\n    styleUrls: ['./companylogo.component.scss']\r\n})\r\nexport class CompanylogoComponent implements OnInit {\r\n    public isvisible: boolean = true;\r\n    public files: NgxFileDropEntry[] = [];\r\n    public imageSrc: any;\r\n    public idempresa: string = \"\";\r\n    public companyDTO: CompanyDTO = new CompanyDTO();\r\n    //#region Variables Toast\r\n    config: ToasterConfig;\r\n\r\n    index = 1;\r\n    destroyByClick = true;\r\n    duration = 2000;\r\n    hasIcon = true;\r\n    position: NbGlobalPosition = NbGlobalPhysicalPosition.TOP_RIGHT;\r\n    preventDuplicates = false;\r\n    status: NbComponentStatus = 'primary';\r\n\r\n    title = 'HI there!';\r\n    content = `I'm cool toaster!`;\r\n\r\n    types: NbComponentStatus[] = [\r\n        'primary',\r\n        'success',\r\n        'info',\r\n        'warning',\r\n        'danger',\r\n    ];\r\n    positions: string[] = [\r\n        NbGlobalPhysicalPosition.TOP_RIGHT,\r\n        NbGlobalPhysicalPosition.TOP_LEFT,\r\n        NbGlobalPhysicalPosition.BOTTOM_LEFT,\r\n        NbGlobalPhysicalPosition.BOTTOM_RIGHT,\r\n        NbGlobalLogicalPosition.TOP_END,\r\n        NbGlobalLogicalPosition.TOP_START,\r\n        NbGlobalLogicalPosition.BOTTOM_END,\r\n        NbGlobalLogicalPosition.BOTTOM_START,\r\n    ];\r\n\r\n    quotes = [\r\n        {title: null, body: 'We rock at Angular'},\r\n        {title: null, body: 'Titles are not always needed'},\r\n        {title: null, body: 'Toastr rock!'},\r\n    ];\r\n\r\n    //#endregion\r\n\r\n    constructor(\r\n        private _companyService: CompanyService,\r\n        private toastrService: NbToastrService,\r\n    ) {\r\n    }\r\n\r\n\r\n    ngOnInit() {\r\n        this.initialize();\r\n    }\r\n\r\n    private initialize() {\r\n\r\n        this.getCompanyLogo();\r\n    }\r\n\r\n    //#region Metodos privados\r\n    //Todo : Muestra toast segun mensaje\r\n    private showToast(type: NbComponentStatus, title: string, body: string) {\r\n        const hasIcon = this.hasIcon ? {} : {icon: 'alert-circle-outline'};\r\n        const config = {\r\n            status: type,\r\n            destroyByClick: this.destroyByClick,\r\n            duration: this.duration,\r\n            position: this.position,\r\n            preventDuplicates: this.preventDuplicates,\r\n            ...hasIcon,\r\n        };\r\n        const titleContent = title ? `. ${title}` : '';\r\n\r\n        this.index += 1;\r\n        this.toastrService.show(\r\n            body,\r\n            ``,\r\n            config);\r\n    }\r\n\r\n    public DeleteFile() {\r\n        this.companyDTO.image = null;\r\n        this.updateCompany(this.companyDTO);\r\n        this.ngOnInit();\r\n    }\r\n\r\n    public UploadFile() {\r\n        if (this.imageSrc === \"https://icon-library.com/images/not-found-icon/not-found-icon-6.jpg\") {\r\n            this.companyDTO.image = null;\r\n            this.updateCompany(this.companyDTO);\r\n        } else {\r\n            this.companyDTO.image = this.imageSrc;\r\n            this.updateCompany(this.companyDTO);\r\n        }\r\n\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region  Metodo Firedrop\r\n    public dropped(files: NgxFileDropEntry[]) {\r\n        for (const droppedFile of files) {\r\n\r\n            // Is it a file?\r\n            if (droppedFile.fileEntry.isFile) {\r\n                const fileEntry = droppedFile.fileEntry as FileSystemFileEntry;\r\n                const reader = new FileReader();\r\n                fileEntry.file((file: File) => {\r\n\r\n                    // Here you can access the real file\r\n                    console.log(droppedFile.relativePath, file);\r\n                    reader.readAsDataURL(file);\r\n                    reader.onload = () => {\r\n                        this.imageSrc = reader.result;\r\n                        this.companyDTO.image = this.imageSrc;\r\n                    };\r\n\r\n\r\n                });\r\n            } else {\r\n                // It was a directory (empty directories are added, otherwise only files)\r\n                const fileEntry = droppedFile.fileEntry as FileSystemDirectoryEntry;\r\n                console.log(droppedFile.relativePath, fileEntry);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public fileOver(event) {\r\n        console.log(event);\r\n    }\r\n\r\n    public fileLeave(event) {\r\n        console.log(event);\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Servicios\r\n    //#region Get\r\n    public getCompanyLogo() {\r\n        this._companyService.getCompanyLogo().subscribe((response: CompanyDTO) => {\r\n            response.image || response.image != null ? this.imageSrc = response.image : this.imageSrc = \"https://icon-library.com/images/not-found-icon/not-found-icon-6.jpg\"\r\n            this.companyDTO = response\r\n        })\r\n    }\r\n\r\n    //endregion\r\n    //#region Post\r\n    public updateCompany(companyDTO: CompanyDTO) {\r\n        this._companyService.updateCompany(companyDTO).subscribe(res => {\r\n            this.getCompanyLogo();\r\n            if (companyDTO.image != null) {\r\n                this.showToast(\"success\", null, \"Logo guardado con exito\")\r\n            } else {\r\n                this.showToast(\"success\", null, \"El logo se ha eliminado\")\r\n            }\r\n        });\r\n    }\r\n\r\n    //#endregion\r\n\r\n\r\n}\r\n","<nb-card accent=\"info\">\r\n    <nb-card-header> {{\"SettingModule.logo\"| translate }}</nb-card-header>\r\n    <nb-card-body>\r\n        <div class=\"center\">\r\n            <ngx-file-drop dropZoneLabel=\"Drop files here\" (onFileDrop)=\"dropped($event)\"\r\n                           (onFileOver)=\"fileOver($event)\" (onFileLeave)=\"fileLeave($event)\">\r\n                <ng-template ngx-file-drop-content-tmp let-openFileSelector=\"openFileSelector\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col\">Deslice la imagen a subir ...</div>\r\n                        <div class=\"col pt-2 align-self-center\">\r\n                            <button nbButton outline status=\"primary\" (click)=\"openFileSelector()\" outline>\r\n                                Cargar Imagen\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                </ng-template>\r\n            </ngx-file-drop>\r\n            <section>\r\n                <div class=\"d-flex justify-content-center p-3\" *ngIf=\"imageSrc\">\r\n                    <img [(src)]=\"imageSrc\" *ngIf=\"imageSrc\" style=\"height: 300px; width:500px\" class=\"pb-2\">\r\n                    <br>\r\n                </div>\r\n                <div class=\"d-flex justify-content-center\" *ngIf=\"imageSrc\">\r\n                    <button nbButton [status]=\"success\" class=\"status-success align-self-center\" (click)=\"UploadFile()\"\r\n                            outline>\r\n                        Guardar\r\n                    </button>\r\n                    <button nbButton outline status=\"danger\" class=\"m-2\" (click)=\"DeleteFile()\">Eliminar</button>\r\n                </div>\r\n            </section>\r\n\r\n        </div>\r\n    </nb-card-body>\r\n</nb-card>\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {SettingComponent} from './setting.component';\r\nimport {routedComponents, SettingRoutingModule} from './setting-routing.module';\r\n// import { AdduserComponent } from './components/adduser/adduser.component';\r\n// import { GetuserComponent } from './components/getuser/getuser.component';\r\n// import { ThirdpartymanageComponent } from './components/thirdpartymanage/thirdpartymanage.component';\r\n// import { CompanytypelistComponent } from './components/companytypelist/companytypelist.component';\r\n// import { ManageprocuracyComponent } from './components/manageprocuracy/manageprocuracy.component';\r\nimport {CompanylogoComponent} from './components/companylogo/companylogo.component';\r\nimport {PasswordChangeComponent} from './components/password-change/password-change.component';\r\nimport {\r\n    NbAccordionModule,\r\n    NbButtonModule,\r\n    NbCardModule,\r\n    NbFormFieldModule,\r\n    NbIconModule,\r\n    NbInputModule,\r\n    NbSelectModule,\r\n    NbDatepickerModule,\r\n    NbUserModule,\r\n\r\n    NbTreeGridModule, NbAlertModule\r\n} from '@nebular/theme';\r\nimport {ThemeModule} from '../../@theme/theme.module';\r\nimport {TablesRoutingModule} from '../tables/tables-routing.module';\r\nimport {Ng2SmartTableModule} from 'ng2-smart-table';\r\nimport {ComponentsModule} from '../../@components/components.module';\r\nimport {UsersPasswordService} from './backend/common/services/users-password.service';\r\nimport {UsersPasswordApi} from './backend/common/api/users-password.api';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport {NbFileUploaderModule} from \"../../@components/editors/file-uploader/file-uploader.module\";\r\nimport {ManageprocuracyComponent} from \"../management/components/manageprocuracy/manageprocuracy.component\";\r\nimport { NgxFileDropModule } from 'ngx-file-drop';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\nconst components = [\r\n    SettingComponent,\r\n    // AdduserComponent,\r\n    // GetuserComponent,   \r\n    ManageprocuracyComponent,    \r\n    CompanylogoComponent,\r\n    PasswordChangeComponent,\r\n    // ManageUserComponent,\r\n    //   UserFormComponent,\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        SettingRoutingModule,\r\n        CommonModule,\r\n        NbCardModule,\r\n        NbInputModule,\r\n        NbButtonModule,\r\n        NbAccordionModule,\r\n        FormsModule,\r\n        Ng2SmartTableModule,\r\n        NbTreeGridModule,\r\n        NbFormFieldModule,\r\n        NbIconModule,\r\n        NbDatepickerModule,\r\n        ReactiveFormsModule,\r\n        NbIconModule,\r\n        ThemeModule,\r\n        TablesRoutingModule,\r\n        Ng2SmartTableModule,\r\n        ComponentsModule,\r\n        NbSelectModule,\r\n        NbButtonModule,\r\n        NbAccordionModule,\r\n        NbFileUploaderModule,\r\n        NbUserModule,\r\n        NbUserModule,\r\n        NgxFileDropModule,\r\n        TranslateModule,\r\n        NbAlertModule\r\n    ],\r\n    declarations: [...routedComponents,components],\r\n    providers: [\r\n        UsersPasswordApi,\r\n        UsersPasswordService,\r\n    ],\r\n})\r\nexport class SettingModule {\r\n}\r\n","import {Component, Inject, OnInit} from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {Location} from '@angular/common';\r\nimport {UsersPasswordService} from '../../backend/common/services/users-password.service';\r\nimport {Password} from '../../models/password';\r\nimport {NbToastrService} from '@nebular/theme';\r\nimport {getDeepFromObject} from '../../../../@auth/helpers';\r\nimport {NB_AUTH_OPTIONS} from '@nebular/auth';\r\nimport {UserData} from \"../../../../@core/interfaces/common/users\";\r\nimport {takeUntil} from \"rxjs/operators\";\r\nimport {Subject} from \"rxjs/Subject\";\r\n\r\n@Component({\r\n    // eslint-disable-next-line @angular-eslint/component-selector\r\n    selector: 'ngx-password-change',\r\n    templateUrl: './password-change.component.html',\r\n    styleUrls: ['./password-change.component.scss'],\r\n})\r\nexport class PasswordChangeComponent implements OnInit {\r\n    protected readonly unsubscribe$ = new Subject<void>();\r\n    minLength: number = this.getConfigValue('forms.validation.password.minLength');\r\n    maxLength: number = this.getConfigValue('forms.validation.password.maxLength');\r\n    passwordForm: FormGroup;\r\n    submitted = false;\r\n    hasPasswordError = false;\r\n    hasPasswordReset = false;\r\n\r\n    get currentPassword() {\r\n        return this.passwordForm.get('currentPassword');\r\n    }\r\n\r\n    get newPassword() {\r\n        return this.passwordForm.get('newPassword');\r\n    }\r\n\r\n    get confirmPassword() {\r\n        return this.passwordForm.get('confirmPassword');\r\n    }\r\n\r\n    constructor(\r\n        @Inject(NB_AUTH_OPTIONS) protected options = {},\r\n        protected fb: FormBuilder,\r\n        protected usersPasswordService: UsersPasswordService,\r\n        protected toastrService: NbToastrService,\r\n        private userData: UserData,\r\n        protected location: Location) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.initPasswordForm();\r\n        this.getCurrentUser();\r\n\r\n    }\r\n\r\n    getCurrentUser(): void {\r\n        this.userData.refreshInfoCurrentUser().pipe(takeUntil(this.unsubscribe$)).subscribe(user => {\r\n            console.log()\r\n            this.hasPasswordReset = user.hasResetPassword\r\n            console.log(\"hasPasswordReset\", this.hasPasswordReset)\r\n        })\r\n    }\r\n\r\n    initPasswordForm() {\r\n        const passwordValidators = [\r\n            Validators.required,\r\n            Validators.minLength(this.minLength),\r\n            Validators.maxLength(this.maxLength),\r\n        ];\r\n\r\n        this.passwordForm = this.fb.group({\r\n            currentPassword: this.fb.control('', [...passwordValidators]),\r\n            newPassword: this.fb.control('', [...passwordValidators]),\r\n            confirmPassword: this.fb.control('', [...passwordValidators]),\r\n        });\r\n    }\r\n\r\n    updatePassword() {\r\n        this.submitted = true;\r\n        this.hasPasswordError = false;\r\n        const password: Password = this.passwordForm.value;\r\n        this.usersPasswordService.update(password).subscribe(() => {\r\n            this.getCurrentUser();\r\n            this.submitted = false;\r\n            this.passwordForm.reset();\r\n            this.toastrService.success('', '¡Registro exitoso!', {\r\n                icon: '',\r\n            });\r\n        }, () => {\r\n            this.submitted = false;\r\n            this.hasPasswordError = true;\r\n        });\r\n    }\r\n\r\n    getConfigValue(key: string): any {\r\n        return getDeepFromObject(this.options, key, null);\r\n    }\r\n\r\n    back($event: MouseEvent) {\r\n        $event.preventDefault();\r\n        this.location.back();\r\n    }\r\n}\r\n","<div class=\"col-lg-12\">\r\n    <nb-card *ngIf=\"hasPasswordReset\">\r\n        <nb-card-body class=\"example-last-child-no-b-margin\">\r\n            <nb-alert status=\"warning\">¡Advertencia! Para continuar debe actualizar su contraseña.</nb-alert>\r\n        </nb-card-body>\r\n    </nb-card>\r\n    <nb-card>\r\n        <!--<nb-card-header>Cambiar contraseña</nb-card-header>-->\r\n        <nb-card-header>\r\n            <nav class=\"navigation\">\r\n                <a href=\"#\" (click)=\"back($event)\" class=\"link back-link\" aria-label=\"Back\">\r\n                    <nb-icon icon=\"arrow-back\"></nb-icon>\r\n                </a>\r\n                {{\"SettingModule.Cambiar_Contrasena\"| translate }}\r\n            </nav>\r\n        </nb-card-header>\r\n        <nb-card-body>\r\n            <form [formGroup]=\"passwordForm\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"currentPassword\" class=\"label\">Contraseña actual</label>\r\n\r\n                    <input fullWidth\r\n                           nbInput\r\n                           autofocus\r\n                           id=\"currentPassword\"\r\n                           formControlName=\"currentPassword\"\r\n                           type=\"password\"\r\n                           class=\"first\"\r\n                           placeholder=\"Contraseña actual\">\r\n\r\n                    <ngx-validation-message label=\"Password\"\r\n                                            [showMinLength]=\"currentPassword?.hasError('minlength') && currentPassword.touched\"\r\n                                            [showMaxLength]=\"currentPassword?.hasError('maxlength') && currentPassword.touched\"\r\n                                            [showRequired]=\"currentPassword?.errors?.required && currentPassword.touched\"\r\n                                            [minLength]=\"minLength\"\r\n                                            [maxLength]=\"maxLength\"></ngx-validation-message>\r\n                    <p class=\"error-message caption status-danger\"\r\n                       *ngIf=\"hasPasswordError\">\r\n                        Contraseña incorrecta.\r\n                    </p>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"newPassword\" class=\"label\">Contraseña nueva</label>\r\n\r\n                    <input fullWidth nbInput id=\"newPassword\"\r\n                           formControlName=\"newPassword\"\r\n                           type=\"password\"\r\n                           placeholder=\"Nueva contraseña\">\r\n\r\n                    <ngx-validation-message label=\"Password\"\r\n                                            [showMinLength]=\"newPassword?.hasError('minlength') && newPassword.touched\"\r\n                                            [showMaxLength]=\"newPassword?.hasError('maxlength') && newPassword.touched\"\r\n                                            [showRequired]=\"newPassword?.errors?.required && newPassword.touched\"\r\n                                            [minLength]=\"minLength\"\r\n                                            [maxLength]=\"maxLength\"></ngx-validation-message>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"confirmPassword\" class=\"label\">Confirmar contraseña</label>\r\n\r\n                    <input fullWidth\r\n                           nbInput\r\n                           id=\"confirmPassword\"\r\n                           formControlName=\"confirmPassword\"\r\n                           type=\"password\"\r\n                           placeholder=\"Confirmar contraseña\">\r\n\r\n                    <ngx-validation-message label=\"Confirmar contraseña\"\r\n                                            [showMinLength]=\"confirmPassword?.hasError('minlength') && confirmPassword.touched\"\r\n                                            [showMaxLength]=\"confirmPassword?.hasError('maxlength') && confirmPassword.touched\"\r\n                                            [showRequired]=\"confirmPassword?.errors?.required && confirmPassword.touched\"\r\n                                            [minLength]=\"minLength\"\r\n                                            [maxLength]=\"maxLength\"></ngx-validation-message>\r\n                    <p class=\"error-message caption status-danger\"\r\n                       *ngIf=\"newPassword.value != confirmPassword.value && confirmPassword.touched\">\r\n                        ¡La contraseña y la contraseña de confirmación no coinciden!\r\n                    </p>\r\n                </div>\r\n            </form>\r\n        </nb-card-body>\r\n        <nb-card-footer>\r\n            <button nbButton\r\n                    status=\"primary\"\r\n                    fullWidth\r\n                    [disabled]=\"submitted || !passwordForm.valid || newPassword.value != confirmPassword.value\"\r\n                    [class.btn-pulse]=\"submitted\"\r\n                    (click)=\"updatePassword()\">\r\n                Guardar\r\n            </button>\r\n        </nb-card-footer>\r\n    </nb-card>\r\n</div>\r\n","import {NgModule} from '@angular/core';\r\nimport {RouterModule, Routes} from '@angular/router';\r\nimport {CompanytypelistComponent} from '../management/components/companytypelist/companytypelist.component';\r\nimport {ThirdpartymanageComponent} from '../management/components/thirdpartymanage/thirdpartymanage.component';\r\nimport {ManageprocuracyComponent} from '../management/components/manageprocuracy/manageprocuracy.component';\r\nimport {SettingComponent} from './setting.component';\r\nimport {CompanylogoComponent} from './components/companylogo/companylogo.component';\r\nimport {PasswordChangeComponent} from './components/password-change/password-change.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: SettingComponent,\r\n        children: [\r\n            {\r\n                path: 'companylogo',\r\n                component: CompanylogoComponent,\r\n            },\r\n            {\r\n                path: 'companylogo',\r\n                component: CompanylogoComponent,\r\n            },\r\n            {\r\n                path: 'password-change',\r\n                component: PasswordChangeComponent,\r\n            },\r\n        ],\r\n    },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class SettingRoutingModule { }\r\n\r\nexport const routedComponents = [\r\n    ManageprocuracyComponent,\r\n    CompanylogoComponent,\r\n    SettingComponent,\r\n    PasswordChangeComponent,\r\n];\r\n"],"sourceRoot":"webpack:///"}